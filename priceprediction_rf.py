# -*- coding: utf-8 -*-
"""priceprediction_rf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YGj4xiQ3bhNM0IOOCmZhZChexK1FMHFD
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib  # or pickle
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor

# Read dataframe on brands and models
file_path = 'carbrandmodellist.csv'
df = pd.read_csv(file_path)

luxury_brands = ["ALFA ROMEO", "ASTON MARTIN", "AUDI", "BENTLEY", "BMW", "CADILLAC", "FERRARI", "JAGUAR", "LAMBORGHINI", "LAND ROVER", "LEXUS", "LOTUS", "MASERATI", "MCLAREN", "MERCEDES-BENZ", "MERCEDES-MAYBACH", "PORSCHE", "ROLLS-ROYCE", "TESLA", "VOLKSWAGEN", "VOLVO"]

# Define predefined lists
transmission_options = ['Automatic', 'Manual']
color_options = ['Beige', 'Black', 'Blue', 'Brown', 'Bronze', 'Dark Blue', 'Gold', 'Gray', 'Green', 'Magenta', 'Maroon', 'Olive', 'Orange', 'Pink', 'Purple', 'Red', 'Silver', 'White', 'Yellow']
condition_options = ['Commercial Car', 'New Car', 'Recon Car', 'Used Car']
location_options = ['Johor', 'Kedah', 'Kelantan', 'Kuala Lumpur', 'Labuan', 'Melaka', 'Negeri Sembilan', 'Pahang', 'Penang', 'Perak', 'Putrajaya', 'Sabah', 'Selangor', 'Sarawak', 'Terengganu', 'Perlis', 'Pulau Pinang']

# Load trained pipeline and model
pipeline = joblib.load('pipeline_rf.pkl')
model_xgb = joblib.load('model_rf.pkl')

# --- Background Setting
st.markdown("""
    <style>
        body {
            background-color: #b3e0ff;  /* Light blue pastel background */
        }
        .stApp {
            background-color: #e6f7ff;  /* Lighter shade for the app container */
        }
        .stButton>button {
            background-color: #80ccff;  /* Light blue for buttons */
            color: white;
            font-size: 18px;
        }
    </style>
""", unsafe_allow_html=True)

# --- Title & Description
st.title("üöó **Used Car Price Prediction App**")
st.markdown("""
    This app predicts the **used car price** in Malaysia based on your car details.
    Fill in the information below to get an estimated car price.
    It uses a trained Random Forest model to make predictions.
""")

# --- Input Form Header
st.header("Enter Car Details:")

# --- Input form
brand = st.selectbox("Brand", sorted(df['Brand'].unique()))
model = st.selectbox("Model", sorted(df[df['Brand'] == brand]['Model'].unique()))
variant = st.selectbox("Variant", sorted(df[df['Model'] == model]['Variant'].unique()))
engine = st.selectbox("Engine", sorted(df[df['Model'] == model]['Engine'].unique()))
condition = st.selectbox("Condition", condition_options, index=condition_options.index('Used Car'))
location = st.selectbox("Location", location_options)
mileage = st.number_input("Mileage (km)", min_value=0, step=1000)
color = st.selectbox("Color", color_options)
year = st.slider("Year", min_value=1970, max_value=2024, value=2020)
transmission = st.selectbox("Transmission", transmission_options)

# --- Car Type Display
car_type = 'Luxury' if brand.upper() in luxury_brands else 'Regular'
st.markdown(f"**Car Type:** {car_type} üöô")

# --- Predict Button
if st.button("Predict Price"):
    # Create a DataFrame for input
    input_df = pd.DataFrame([{
        'Brand': brand,
        'Model': model,
        'Variant': variant,
        'Engine': engine,
        'Condition': condition,
        'Location': location,
        'Mileage': mileage,
        'Color': color,
        'Year': year,
        'Transmission': transmission,
        'Car Type': car_type
    }])

    # Transform and predict
    transformed_input = pipeline.transform(input_df)
    prediction = model_xgb.predict(transformed_input)

    # --- Display Result
    st.markdown(f"### **üí∞ Estimated Price: RM {prediction[0]:,.2f}**")
    st.markdown("This estimate is based on the car specifications provided.")

    # --- Additional Information Section
    st.markdown("---")
    st.subheader("About This Model")
    st.markdown("""
    The prediction model is trained using various features like **engine size, car condition, mileage**, etc.
    This application allows you to get an estimate of the car price based on these features.
    Feel free to explore different brands and models for accurate price estimates.
    """)

# --- Footer Section
st.markdown("---")
st.markdown("Developed with ‚ù§Ô∏è by Melanie.")
st.markdown("[GitHub Repo](https://github.com/melanieyeee)")